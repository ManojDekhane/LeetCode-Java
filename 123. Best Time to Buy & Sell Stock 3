class Solution {
    public int recursion(int index, int buy, int capacity, int[] prices, int[][][] dp) {
        if (capacity == 0) return 0;

        if (index == prices.length) return 0;

        if (dp[index][buy][capacity] != -1) return dp[index][buy][capacity];

        int profit = 0;

        if (buy == 1) {
            int buyIt = -prices[index] + recursion(index + 1, 0, capacity, prices, dp);
            int skip = 0 + recursion(index + 1, 1, capacity, prices, dp);

            profit = Math.max(buyIt, skip);
        } else {
            int sellIt = prices[index] + recursion(index + 1, 1, capacity - 1, prices, dp);
            int skip = 0 + recursion(index + 1, 0, capacity, prices, dp);

            profit = Math.max(sellIt, skip);
        }

        return dp[index][buy][capacity] = profit;
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;

        int[][][] dp = new int[n][2][3];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }

        return recursion(0, 1, 2, prices, dp);
    }
}
